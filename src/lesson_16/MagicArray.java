package lesson_16;

public class MagicArray {
    int[] array;
    int cursor; // присвоено значение по умолчанию = 0;

    public MagicArray() {
        array = new int[10];
    }

    // Добавление в массив одного элемента

    void add (int value) {

        // Проверка, есть ли вообще свободное место во внутреннем массиве
        // Если места нет, его нужно добавить
        if (cursor == array.length - 1) {
            // Расширить массив перед добавлением нового элемента
            expandArray();

        }

        array[cursor] = value;
        cursor++;

    }

    void add(int... numbers) {
        // c numbers возможно обращаться точно также, как со ссылкой на массив int
        // System.out.println("Приняли несколько целых чисел типа int, а именно: " + numbers.length);
        // System.out.println("Есть индекс у каждого числа, как массива. Под индексом 0: " + numbers[0]);
        for (int i = 0; i < numbers.length; i++) add(numbers[i]);

    }

    // Динамическое расширение массива
    void expandArray() {
        System.out.println("Расширяем массив! Курсор = " + cursor);

        /*
        1. Создать новый массив бОльшего размера (в 2 раза больше).
        2. Переписать в новый массив все значения из старого (до курсора).
        3. Перебросить ссылку.
         */

        // 1
        int[] newArray = new int[array.length * 2];

        //2
        for (int i = 0; i < cursor; i++) newArray[i] = array[i];

        // Перебрасываем ссылку. Переменная array хранить ссылку на "новый" массив
        array = newArray;
        System.out.println("Расширение массива завершено");

    }

    // Возвращаем строковое представление массива
    // [1, 14, 16]
    public String toString() {

        if (cursor == 0) return "[]";

        String result = "[";
        for (int i = 0; i < cursor; i++) {
            result = result + array[i] + (i < cursor - 1 ? ", " : "]"); // ", " / "]"
        }

        return result;
    }

    // Текущее количество элементов в массиве
    int size() {
        return cursor;
    }

    // Возвращает значение по индексу
    int get(int index) {
        if (index >= 0 && index > cursor) {
            return array[index];
        }
        // Написать код, если индекс "некорректный"
        return Integer.MIN_VALUE; // Хорошего решения нет
        //TODO: поправить обработку некорректного индекса
    }

    int remove(int index) {
        /*
        1. Проверка индекса на валидность
        2. Удалить значение по индексу
        3. Передвинуть курсор (т.к. количество элементов уменьшилось)
        4. Вернуть старое значение
         */
    return 0;
    }

}


/*
1. Добавлять в массив элемент (не думая об индексах, размере массива)
2. Динамическое изменение размера массива.
3. Возвращать строковое представление массива (какие элементы там есть).
4. Добавляем в массив сразу несколько значений.
5. Текущее количество элементов в массиве.
6. Возвращает значение по индексу
7. Удаляет элемент по индексу (есть индекс - удалить этот элемент из массива). Вернуть старое значение

 */